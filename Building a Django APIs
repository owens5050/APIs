Building a REST API with Django is a bit more involved compared to Flask, but Django offers powerful features out of the box, especially when combined with Django REST Framework (DRF). Here is a step-by-step guide to building a simple REST API using Django and DRF.

Step 1: Install Django and Django REST Framework

First, create a new virtual environment and install Django and Django REST Framework.

bash
Copy code
# Create a virtual environment (optional but recommended)
python -m venv venv
source venv/bin/activate  # On Windows use `venv\Scripts\activate`

# Install Django and Django REST Framework
pip install django djangorestframework

Step 2: Create a Django Project and App

Next, create a new Django project and an app within the project.

bash
Copy code
# Create a new Django project
django-admin startproject myproject
cd myproject

# Create a new app (e.g., "todos")
python manage.py startapp todos

Step 3: Add Django REST Framework to Installed Apps

Open your myproject/settings.py file and add 'rest_framework' and your app ('todos') to the INSTALLED_APPS list:

python
Copy code
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # Add this line
    'todos',           # Add your app here
]
Step 4: Create the Todo Model

In the todos/models.py file, define a simple Todo model.

python
Copy code
from django.db import models

class Todo(models.Model):
    task = models.CharField(max_length=200)
    done = models.BooleanField(default=False)

    def __str__(self):
        return self.task

Step 5: Create a Serializer for the Model

In the todos app, create a serializers.py file to define how your Todo model will be converted to and from JSON.

python
Copy code
from rest_framework import serializers
from .models import Todo

class TodoSerializer(serializers.ModelSerializer):
    class Meta:
        model = Todo
        fields = ['id', 'task', 'done']
        
Step 6: Create Views for the API

In the todos/views.py file, use DRF's APIView or viewsets to define your API endpoints.

Here is an example using APIView to handle CRUD operations.

python
Copy code
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import Todo
from .serializers import TodoSerializer

class TodoList(APIView):
    def get(self, request):
        todos = Todo.objects.all()
        serializer = TodoSerializer(todos, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = TodoSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class TodoDetail(APIView):
    def get(self, request, pk):
        try:
            todo = Todo.objects.get(pk=pk)
        except Todo.DoesNotExist:
            return Response({'message': 'Todo not found'}, status=status.HTTP_404_NOT_FOUND)
        serializer = TodoSerializer(todo)
        return Response(serializer.data)

    def put(self, request, pk):
        try:
            todo = Todo.objects.get(pk=pk)
        except Todo.DoesNotExist:
            return Response({'message': 'Todo not found'}, status=status.HTTP_404_NOT_FOUND)

        serializer = TodoSerializer(todo, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        try:
            todo = Todo.objects.get(pk=pk)
        except Todo.DoesNotExist:
            return Response({'message': 'Todo not found'}, status=status.HTTP_404_NOT_FOUND)

        todo.delete()
        return Response({'message': 'Todo deleted'}, status=status.HTTP_204_NO_CONTENT)

Step 7: Configure URL Routing

In the todos app, create a urls.py file to map URLs to views.

python
Copy code
from django.urls import path
from .views import TodoList, TodoDetail

urlpatterns = [
    path('todos/', TodoList.as_view(), name='todo-list'),
    path('todos/<int:pk>/', TodoDetail.as_view(), name='todo-detail'),
]
Then, include the todos.urls in your project’s main urls.py file (myproject/urls.py):

python
Copy code
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('todos.urls')),  # Include the app's URL patterns
]
Step 8: Migrate the Database

Now, create the database tables for your Todo model by running Django’s migration commands.

bash
Copy code
# Create the database schema
python manage.py makemigrations
python manage.py migrate

Step 9: Start the Django Development Server

Start the Django development server to run your API locally.

bash
Copy code
python manage.py runserver
Your API will be available at http://127.0.0.1:8000/api/.

Example API Endpoints:
GET /api/todos/: Retrieve all todo items.

bash
Copy code
curl http://127.0.0.1:8000/api/todos/
GET /api/todos/<id>/: Retrieve a single todo by ID.

bash
Copy code
curl http://127.0.0.1:8000/api/todos/1/
POST /api/todos/: Create a new todo.

bash
Copy code
curl -X POST -H "Content-Type: application/json" -d '{"task": "Learn Django", "done": false}' http://127.0.0.1:8000/api/todos/
PUT /api/todos/<id>/: Update an existing todo.

bash
Copy code
curl -X PUT -H "Content-Type: application/json" -d '{"task": "Learn Django REST", "done": true}' http://127.0.0.1:8000/api/todos/1/
DELETE /api/todos/<id>/: Delete a todo.

bash
Copy code
curl -X DELETE http://127.0.0.1:8000/api/todos/1/

Step 10: Optional Enhancements

You can add additional features like:

Authentication and Permissions (e.g., use JWT tokens or OAuth).
Pagination to handle large sets of data.
Filtering and Searching for more advanced querying.
Deployment to platforms like Heroku, AWS, or DigitalOcean.
